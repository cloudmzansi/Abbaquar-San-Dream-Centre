import { useState, useEffect } from 'react';
import AdminLayout from '@/components/admin/AdminLayout';
import { getEvents, createEvent, updateEvent, deleteEvent } from '@/lib/eventsService';
import { Event } from '@/types/supabase';
import { Calendar, Loader, Plus, Pencil, Trash2, Save, X, Clock, MapPin, FileImage } from 'lucide-react';

const EventsAdmin = () => {
  const [events, setEvents] = useState<Event[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [editEvent, setEditEvent] = useState<Event | null>(null);
  const [isCreating, setIsCreating] = useState(false);
  
  // Form states for new/edit event
  const [title, setTitle] = useState('');
  const [date, setDate] = useState('');
  const [time, setTime] = useState('');
  const [venue, setVenue] = useState('');
  const [description, setDescription] = useState('');
  const [displayOn, setDisplayOn] = useState<'home' | 'events' | 'both'>('both');
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);

  // Load events
  const loadEvents = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const data = await getEvents();
      setEvents(data);
    } catch (err: any) {
      console.error('Failed to load events:', err);
      setError('Failed to load events. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadEvents();
  }, []);

  // Handle image file selection
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;
    
    const file = files[0];
    setImageFile(file);
    
    // Generate preview URL
    const reader = new FileReader();
    reader.onload = () => {
      setPreviewUrl(reader.result as string);
    };
    reader.readAsDataURL(file);
  };

  // Reset form
  const resetForm = () => {
    setTitle('');
    setDate('');
    setTime('');
    setVenue('');
    setDescription('');
    setDisplayOn('both');
    setImageFile(null);
    setPreviewUrl(null);
    setEditEvent(null);
    setIsCreating(false);
  };

  // Set form for editing
  const handleEdit = (event: Event) => {
    setEditEvent(event);
    setTitle(event.title);
    setDate(event.date);
    setTime(event.time);
    setVenue(event.venue);
    setDescription(event.description);
    setDisplayOn(event.display_on);
    setPreviewUrl(event.image_path || null);
    setIsCreating(false);
  };

  // Set form for creating
  const handleCreate = () => {
    resetForm();
    setIsCreating(true);
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!title || !date || !time || !venue || !description) {
      setError('All fields are required');
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    setSuccessMessage(null);
    
    try {
      if (editEvent) {
        // Update existing event
        await updateEvent(
          editEvent.id, 
          { title, date, time, venue, description, display_on: displayOn },
          imageFile || undefined
        );
        setSuccessMessage('Event updated successfully');
      } else {
        // Create new event
        await createEvent(
          { title, date, time, venue, description, display_on: displayOn },
          imageFile || undefined
        );
        setSuccessMessage('Event created successfully');
      }
      
      // Reset form and reload events
      resetForm();
      await loadEvents();
    } catch (err: any) {
      console.error('Error saving event:', err);
      setError('Failed to save event. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle delete
  const handleDelete = async (id: string) => {
    if (!confirm('Are you sure you want to delete this event? This action cannot be undone.')) {
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      await deleteEvent(id);
      setEvents(events.filter(event => event.id !== id));
      setSuccessMessage('Event deleted successfully');
    } catch (err: any) {
      console.error('Error deleting event:', err);
      setError('Failed to delete event. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <AdminLayout>
      <div className="space-y-8">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold text-white">Events Management</h1>
          
          {!isCreating && !editEvent && (
            <button
              onClick={handleCreate}
              className="inline-flex items-center px-4 py-2 bg-[#4f7df9] text-white rounded-xl hover:bg-[#3a6eea]"
            >
              <Plus size={18} className="mr-2" />
              Add New Event
            </button>
          )}
        </div>

        {/* Success and Error Messages */}
        {successMessage && (
          <div className="bg-green-900/50 border border-green-700 text-green-200 px-4 py-3 rounded-md">
            {successMessage}
          </div>
        )}
        
        {error && (
          <div className="bg-red-900/50 border border-red-700 text-red-200 px-4 py-3 rounded-md">
            {error}
          </div>
        )}

        {/* Event Form */}
        {(isCreating || editEvent) && (
          <div className="bg-[#102a4c] rounded-lg shadow-md p-6 border border-white/10 text-white">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-white">
                {editEvent ? 'Edit Event' : 'Create New Event'}
              </h2>
              <button
                onClick={resetForm}
                className="text-white/70 hover:text-white rounded-full hover:bg-white/10"
              >
                <X size={20} />
              </button>
            </div>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-white/90 mb-1">Title</label>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="w-full p-2 bg-[#1a3a5f] border border-white/20 rounded-md focus:ring-[#4f7df9] focus:border-[#4f7df9] text-white"
                  required
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-white/90 mb-1">Date</label>
                  <input
                    type="text"
                    value={date}
                    onChange={(e) => setDate(e.target.value)}
                    className="w-full p-2 bg-[#1a3a5f] border border-white/20 rounded-md focus:ring-[#4f7df9] focus:border-[#4f7df9] text-white"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-white/90 mb-1">Time</label>
                  <input
                    type="text"
                    value={time}
                    onChange={(e) => setTime(e.target.value)}
                    className="w-full p-2 bg-[#1a3a5f] border border-white/20 rounded-md focus:ring-[#4f7df9] focus:border-[#4f7df9] text-white"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-white/90 mb-1">Venue</label>
                  <input
                    type="text"
                    value={venue}
                    onChange={(e) => setVenue(e.target.value)}
                    className="w-full p-2 bg-[#1a3a5f] border border-white/20 rounded-md focus:ring-[#4f7df9] focus:border-[#4f7df9] text-white"
                    required
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-white/90 mb-1">Description</label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows={4}
                  className="w-full p-2 bg-[#1a3a5f] border border-white/20 rounded-md focus:ring-[#4f7df9] focus:border-[#4f7df9] text-white"
                  placeholder="Event description"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-white/90 mb-1">Display On</label>
                <select
                  value={displayOn}
                  onChange={(e) => setDisplayOn(e.target.value as 'home' | 'events' | 'both')}
                  className="w-full p-2 bg-[#1a3a5f] border border-white/20 rounded-md focus:ring-[#4f7df9] focus:border-[#4f7df9] text-white"
                >
                  <option value="home">Home Page Only</option>
                  <option value="events">Events Page Only</option>
                  <option value="both">Both Pages</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-white/90 mb-1">Image (Optional)</label>
                <div className="flex items-start space-x-4">
                  <div className="flex-1">
                    <div className="flex items-center justify-center w-full">
                      <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-white/20 border-dashed rounded-lg cursor-pointer bg-[#1a3a5f]/50 hover:bg-[#1a3a5f]">
                        <div className="flex flex-col items-center justify-center pt-5 pb-6">
                          <FileImage className="w-8 h-8 mb-3 text-white/60" />
                          <p className="mb-2 text-sm text-white/80">
                            <span className="font-semibold">Click to upload</span> or drag and drop
                          </p>
                          <p className="text-xs text-white/60">PNG, JPG or WEBP (MAX. 2MB)</p>
                        </div>
                        <input 
                          type="file" 
                          className="hidden" 
                          accept="image/*"
                          onChange={handleImageChange}
                        />
                      </label>
                    </div>
                  </div>
                  
                  {previewUrl && (
                    <div className="flex-shrink-0 ml-4">
                      <img
                        src={previewUrl}
                        alt="Preview"
                        className="h-32 w-auto object-cover rounded-xl border border-white/30"
                      />
                    </div>
                  )}
              </div>
              
              <div className="flex justify-end space-x-2 pt-2">
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-4 py-2 border border-white/20 rounded-xl text-white/80 hover:bg-white/10"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="inline-flex items-center px-4 py-2 bg-[#4f7df9] text-white rounded-xl hover:bg-[#3a6eea] disabled:bg-[#4f7df9]/50"
                >
                  {isSubmitting ? (
                    <>
                      <Loader size={18} className="mr-2 animate-spin" />
                      Saving...
                    </>
                  ) : (
                    <>
                      <Save size={18} className="mr-2" />
                      Save Event
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        )}

        {/* Events List */}
        {!isCreating && !editEvent && (
          <div className="bg-[#102a4c] rounded-lg shadow-md overflow-hidden border border-white/10">
            <div className="p-6">
              <h2 className="text-xl font-semibold mb-4 text-white">All Events</h2>
              
              {isLoading ? (
                <div className="flex justify-center py-12">
                  <Loader className="animate-spin text-[#4f7df9]" size={48} />
                </div>
              ) : events.length === 0 ? (
                <div className="text-center py-12 text-white/60">
                  <Calendar className="mx-auto h-12 w-12 text-white/40 mb-3" />
                  <p>No events found. Create your first event!</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-white/10">
                    <thead className="bg-[#0c2342]">
                      <tr>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Event
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Date & Time
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Venue
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Display On
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-[#1a3a5f] divide-y divide-white/10">
                      {events.map((event) => (
                        <tr key={event.id}>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              {event.image_path ? (
                                <img
                                  src={event.image_path}
                                  alt={event.title}
                                  className="h-10 w-10 rounded-full mr-3 object-cover"
                                />
                              ) : (
                                <div className="h-10 w-10 rounded-full bg-[#4f7df9]/30 border border-white/20 flex items-center justify-center mr-3">
                                  <Calendar className="text-white" size={16} />
                                </div>
                              )}
                              <div>
                                <div className="text-sm font-medium text-white">{event.title}</div>
                                <div className="text-sm text-white/60 truncate max-w-xs">
                                  {event.description.length > 40
                                    ? `${event.description.substring(0, 40)}...`
                                    : event.description}
                                </div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex flex-col">
                              <div className="flex items-center text-sm text-white">
                                <Calendar className="h-4 w-4 text-white/60 mr-1" />
                                {event.date}
                              </div>
                              <div className="flex items-center text-sm text-white/60 mt-1">
                                <Clock className="h-4 w-4 text-white/60 mr-1" />
                                {event.time}
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center text-sm text-white">
                              <MapPin className="h-4 w-4 text-white/60 mr-1" />
                              {event.venue}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-[#4f7df9]/30 text-white">
                              {event.display_on === 'both'
                                ? 'Home & Events'
                                : event.display_on === 'home'
                                ? 'Home Page'
                                : 'Events Page'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-white/60">
                            <div className="flex space-x-2">
                              <button
                                onClick={() => handleEdit(event)}
                                className="text-[#4f7df9] hover:text-white"
                                title="Edit event"
                              >
                                <Pencil size={18} />
                              </button>
                              <button
                                onClick={() => handleDelete(event.id)}
                                className="text-red-400 hover:text-red-300"
                                title="Delete event"
                              >
                                <Trash2 size={18} />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default EventsAdmin; 