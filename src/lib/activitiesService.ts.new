import { supabase } from './supabase';
import { Activity } from '@/types/supabase';
import { v4 as uuidv4 } from 'uuid';

const BUCKET_NAME = 'activities';

// Function to get direct URL without any parameters
function getDirectUrl(filename: string): string {
  const { data } = supabase.storage.from(BUCKET_NAME).getPublicUrl(filename);
  return data.publicUrl;
}

// Get activities with optional filtering by display location
export async function getActivities(displayOn?: 'home' | 'activities' | 'both'): Promise<Activity[]> {
  let query = supabase.from('activities').select('*');
  
  if (displayOn) {
    // If displayOn is specified, get items that match displayOn or 'both'
    query = query.or(`display_on.eq.${displayOn},display_on.eq.both`);
  }
  
  const { data, error } = await query;
  
  if (error) {
    console.error('Error fetching activities:', error);
    throw error;
  }
  
  // Transform data to use direct URLs without optimization parameters
  return data.map(activity => {
    if (!activity.image_path) {
      return activity;
    }
    
    // If the path already contains the full URL, strip any query parameters
    if (activity.image_path.includes('supabase.co')) {
      const cleanUrl = activity.image_path.split('?')[0];
      return {
        ...activity,
        image_path: cleanUrl
      };
    }
    
    // Otherwise, generate a direct URL
    return {
      ...activity,
      image_path: getDirectUrl(activity.image_path)
    };
  });
}

// Get a single activity by ID
export async function getActivity(id: string): Promise<Activity> {
  const { data, error } = await supabase
    .from('activities')
    .select('*')
    .eq('id', id)
    .single();
    
  if (error) {
    console.error('Error fetching activity:', error);
    throw error;
  }
  
  if (!data.image_path) {
    return data;
  }
  
  // If the path already contains the full URL, strip any query parameters
  if (data.image_path.includes('supabase.co')) {
    const cleanUrl = data.image_path.split('?')[0];
    return {
      ...data,
      image_path: cleanUrl
    };
  }
  
  // Otherwise, generate a direct URL
  return {
    ...data,
    image_path: getDirectUrl(data.image_path)
  };
}

// Create a new activity
export async function createActivity(
  activity: Omit<Activity, 'id' | 'created_at'>,
  imageFile?: File
): Promise<Activity> {
  let filePath = activity.image_path;
  
  // If there's a new image file, upload it first
  if (imageFile) {
    const fileExt = imageFile.name.split('.').pop();
    filePath = `${uuidv4()}.${fileExt}`;
    
    const { error: uploadError } = await supabase.storage
      .from(BUCKET_NAME)
      .upload(filePath, imageFile, {
        contentType: imageFile.type,
        cacheControl: '3600',
        upsert: false
      });
      
    if (uploadError) throw uploadError;
  }
  
  // Create the activity record
  const { data, error } = await supabase
    .from('activities')
    .insert({
      ...activity,
      image_path: filePath
    })
    .select()
    .single();
    
  if (error) {
    console.error('Error creating activity:', error);
    throw error;
  }
  
  if (!data.image_path) {
    return data;
  }
  
  return {
    ...data,
    image_path: getDirectUrl(data.image_path)
  };
}

// Update an activity
export async function updateActivity(
  id: string,
  updates: Partial<Omit<Activity, 'id' | 'created_at'>>,
  imageFile?: File
): Promise<Activity> {
  let filePath = updates.image_path;
  
  // If there's a new image file, upload it and update the path
  if (imageFile) {
    const fileExt = imageFile.name.split('.').pop();
    filePath = `${uuidv4()}.${fileExt}`;
    
    const { error: uploadError } = await supabase.storage
      .from(BUCKET_NAME)
      .upload(filePath, imageFile, {
        contentType: imageFile.type,
        cacheControl: '3600',
        upsert: false
      });
      
    if (uploadError) throw uploadError;
    
    // If upload successful, check if there was a previous image to delete
    if (!uploadError && updates.image_path) {
      // Delete the old image if it exists and is different
      await supabase.storage.from(BUCKET_NAME).remove([updates.image_path]);
    }
  }
  
  // Update the activity record
  const { data, error } = await supabase
    .from('activities')
    .update({
      ...updates,
      image_path: filePath
    })
    .eq('id', id)
    .select()
    .single();
    
  if (error) {
    console.error('Error updating activity:', error);
    throw error;
  }
  
  if (!data.image_path) {
    return data;
  }
  
  return {
    ...data,
    image_path: getDirectUrl(data.image_path)
  };
}

// Delete an activity
export async function deleteActivity(id: string): Promise<void> {
  // First get the activity to get the file path
  const { data: activity, error: fetchError } = await supabase
    .from('activities')
    .select('image_path')
    .eq('id', id)
    .single();
    
  if (fetchError) {
    console.error('Error fetching activity for deletion:', fetchError);
    throw fetchError;
  }
  
  // If the activity has an image, delete it from storage
  if (activity.image_path) {
    // Extract just the filename if it's a full URL
    let filename = activity.image_path;
    if (filename.includes('/')) {
      filename = filename.split('/').pop() || filename;
    }
    
    const { error: storageError } = await supabase.storage
      .from(BUCKET_NAME)
      .remove([filename]);
      
    if (storageError) {
      console.error('Error deleting file from storage:', storageError);
      throw storageError;
    }
  }
  
  // Delete the activity record
  const { error: dbError } = await supabase
    .from('activities')
    .delete()
    .eq('id', id);
    
  if (dbError) {
    console.error('Error deleting activity record:', dbError);
    throw dbError;
  }
}
